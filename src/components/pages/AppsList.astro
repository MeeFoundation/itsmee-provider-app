---
import { Button, ButtonLink, Input, Loading } from "mee-components";
import MeeGuy from "@components/MeeGuy.astro";
---

<main class="flex h-full min-h-screen pt-27">
  <Loading />
  <article
    class="hidden h-full w-full flex-1 items-center justify-center"
    id="empty-app-list"
  >
    <section
      class="flex max-w-screen-sm flex-col items-center justify-center gap-8 px-6"
    >
      <div><MeeGuy /></div>
      <div class="flex flex-col gap-2">
        <div
          class="text-center text-4xl font-semibold tracking-0.02 text-gray-800"
        >
          You have no apps yet
        </div>
        <div
          class="max-w-93.5 text-center text-lg font-normal tracking-0.02 text-gray-800"
        >
          Please add your apps and allow users to privately use them with Mee
        </div>
      </div>
      <ButtonLink
        href="/#create-app"
        type="button"
        className="w-auto px-4"
        leftIcon="plus">New app</ButtonLink
      >
    </section>
  </article>
  <article
    class="hidden h-full w-full max-w-480 flex-1 flex-col items-start justify-start gap-6 p-6"
    id="app-list"
  >
    <div
      class="flex w-full flex-wrap justify-between gap-6 text-base font-semibold"
    >
      <div class="flex flex-wrap gap-4">
        <Input
          id="search"
          label="Search"
          className="w-full md:!w-80"
          labelPosition="edge"
          autocomplete="off"
          leftIcon="search"
          required
          size="lg"
        />
        <div class="relative w-full md:w-auto">
          <Button
            id="open-filter-modal"
            leftIcon="filter !text-2xl"
            type="button"
            buttonType="tertiary"
            style="filled"
            rightIcon="chevron-down"
            className="w-full justify-between"
            size="l">Filter</Button
          >
          <div
            class="absolute left-0 top-14 z-100 hidden w-full flex-col items-start rounded-lg border border-solid border-brand-300 bg-white p-0 shadow-2 md:w-80"
            id="filter-modal"
          >
            <div class="w-full border-b border-gray-300 p-6 text-gray-800">
              <div class="flex h-14 cursor-pointer flex-row items-center gap-2">
                <Input
                  label="Url"
                  rightIcon="plus-lg"
                  size="lg"
                  id="url-input"
                />
              </div>
              <div class="flex h-14 cursor-pointer flex-row items-center gap-2">
                <Input
                  label="Agent Service Url"
                  rightIcon="plus-lg"
                  size="lg"
                  id="agent-service-url-input"
                />
              </div>
              <div class="flex h-14 cursor-pointer flex-row items-center gap-2">
                <Input
                  label="Agent Service Id"
                  rightIcon="plus-lg"
                  size="lg"
                  id="agent-service-id-input"
                />
              </div>
            </div>
            <div
              class="flex w-full flex-col gap-3 border-b-gray-300 p-6 text-gray-800"
            >
              <Button size="m" id="filter">Apply Filters</Button>
              <Button size="m" buttonType="tertiary" id="clear-filter"
                >Clear All</Button
              >
            </div>
          </div>
        </div>
      </div>
      <div>
        <Button id="new-app" type="button" className="w-auto px-4"
          ><span class="mr-4 text-4xl font-thin">+</span>New app</Button
        >
      </div>
    </div>
    <section
      class="flex w-full flex-col items-start rounded-xl border border-solid border-gray-300 bg-white text-gray-800"
      id="apps-container"
    >
    </section>
  </article>
</main>
<div class="hidden">
  <div id="edit-icon" class="cursor-pointer">
    <i class="bi bi-pencil text-2xl text-brand-700"></i>
  </div>
  <div id="delete-icon" class="cursor-pointer">
    <i class="bi bi-trash text-2xl text-red-700"></i>
  </div>
  <div id="link-icon" class="cursor-pointer">
    <i class="bi bi-link-45deg text-lg text-gray-800"></i>
  </div>
</div>
<script>
  import { HashRouter } from "mee-components";
  import type { ProviderApp } from "@utils/types";
  import { checkProvider } from "@utils/common";
  import { getProviderApps } from "@api/api";
  import {
    getProviderAppsData,
    setProviderAppsData,
    subscribeProviderAppsData,
  } from "@store/ProviderAppsStore";

  const filterApps = (apps?: ProviderApp[]) => {
    const searchInput = document.getElementById(
      "search"
    ) as HTMLInputElement | null;
    const urlInput = document.getElementById(
      "url-input"
    ) as HTMLInputElement | null;
    const agentServiceUrlInput = document.getElementById(
      "agent-service-url-input"
    ) as HTMLInputElement | null;
    const agentServiceIdInput = document.getElementById(
      "agent-service-id-input"
    ) as HTMLInputElement | null;

    const filterValue = searchInput?.value;
    const urlValue = urlInput?.value;
    const agentServiceUrlValue = agentServiceUrlInput?.value;
    const agentServiceIdValue = agentServiceIdInput?.value;
    let filterData = apps;
    if (filterValue) {
      filterData = filterData?.filter((item) =>
        item.name.toLowerCase().includes(filterValue.toLowerCase())
      );
    }
    if (urlValue) {
      filterData = filterData?.filter((item) =>
        item.url.toLowerCase().includes(urlValue.toLowerCase())
      );
    }
    if (agentServiceUrlValue) {
      filterData = filterData?.filter((item) =>
        item.agent_service_url
          .toLowerCase()
          .includes(agentServiceUrlValue.toLowerCase())
      );
    }
    if (agentServiceIdValue) {
      filterData = filterData?.filter((item) =>
        item.agent_service_id
          .toLowerCase()
          .includes(agentServiceIdValue.toLowerCase())
      );
    }

    appendApps(filterData);
  };

  const appendApps = (apps?: ProviderApp[]) => {
    const appsContainer = document.getElementById("apps-container");
    const editIcon = document.getElementById("edit-icon");
    const deleteIcon = document.getElementById("delete-icon");
    const linkIcon = document.getElementById("link-icon");
    const emptyAppList = document.getElementById("empty-app-list");
    const appList = document.getElementById("app-list");
    const loading = document.getElementById("loading");

    loading?.classList.add("hidden");

    if (appsContainer && apps) {
      emptyAppList?.classList.add("hidden");
      appList?.classList.remove("hidden");
      appList?.classList.add("flex");

      appsContainer.innerHTML = "";
      apps.forEach((app, i: number) => {
        const appUrl = "apps/" + i;
        const div = document.createElement("div");
        div.className =
          "flex w-full flex-row items-center justify-between gap-6 border-b border-solid border-b-gray-200 p-6 last:border-b-0";

        const divName = document.createElement("div");

        divName.className = "flex items-center gap-2";
        const divTitle = document.createElement("div");
        const divTitleContent = document.createTextNode(app.name);
        divTitle.appendChild(divTitleContent);
        const iconLink = linkIcon && linkIcon.cloneNode(true);
        const buttonLink = document.createElement("button");
        buttonLink.onclick = () => {
          navigator.clipboard.writeText(app.url);
        };
        iconLink && buttonLink.appendChild(iconLink);
        divName.appendChild(divTitle);
        divName.appendChild(buttonLink);

        const divActions = document.createElement("div");
        divActions.className = "flex items-center gap-6";
        const iconEdit = editIcon && editIcon.cloneNode(true);
        const buttonEdit = document.createElement("button");
        buttonEdit.onclick = () => {
          window.location.hash = appUrl;
        };
        iconEdit && buttonEdit.appendChild(iconEdit);
        const iconDelete = deleteIcon && deleteIcon.cloneNode(true);
        const buttonDelete = document.createElement("button");
        buttonDelete.onclick = () => {
          console.log("delete App");
        };
        iconDelete && buttonDelete.appendChild(iconDelete);
        divActions.appendChild(buttonEdit);
        divActions.appendChild(buttonDelete);
        div.appendChild(divName);
        div.appendChild(divActions);

        appsContainer.appendChild(div);
      });
    } else {
      appList?.classList.add("hidden");
      emptyAppList?.classList.remove("hidden");
      emptyAppList?.classList.add("flex");
    }
  };

  const subscribeProviderApps = async () => {
    const filterButton = document.getElementById("filter");
    const clearFilterButton = document.getElementById("clear-filter");
    const searchInput = document.getElementById(
      "search"
    ) as HTMLInputElement | null;
    const urlInput = document.getElementById(
      "url-input"
    ) as HTMLInputElement | null;
    const agentServiceUrlInput = document.getElementById(
      "agent-service-url-input"
    ) as HTMLInputElement | null;
    const agentServiceIdInput = document.getElementById(
      "agent-service-id-input"
    ) as HTMLInputElement | null;

    let appsData = getProviderAppsData();
    if (!appsData) {
      appsData = await getProviderApps();
      setProviderAppsData(appsData);
    }
    appendApps(appsData);
    subscribeProviderAppsData(appendApps);
    let isFilterModalOpened = false;
    const filterModal = document.getElementById("filter-modal");
    const openFilterModal = document.getElementById("open-filter-modal");
    const toggleFilter = () => {
      if (isFilterModalOpened) {
        filterModal?.classList.remove("flex");
        filterModal?.classList.add("hidden");
      } else {
        filterModal?.classList.remove("hidden");
        filterModal?.classList.add("flex");
      }

      isFilterModalOpened = !isFilterModalOpened;
    };

    const clearFilter = () => {
      if (searchInput) {
        searchInput.value = "";
      }
      if (urlInput) {
        urlInput.value = "";
      }
      if (agentServiceUrlInput) {
        agentServiceUrlInput.value = "";
      }
      if (agentServiceIdInput) {
        agentServiceIdInput.value = "";
      }

      appendApps(appsData);
    };
    openFilterModal?.addEventListener("click", (e) => {
      e.preventDefault();
      e.stopPropagation();
      toggleFilter();
    });
    clearFilterButton?.addEventListener("click", () => {
      clearFilter();
      toggleFilter();
    });
    filterButton?.addEventListener("click", () => {
      filterApps(appsData);
      toggleFilter();
    });
    searchInput?.addEventListener("change", () => filterApps(appsData));
    document.addEventListener("click", (e) => {
      const target = e.target as HTMLElement;
      if (!target.closest("#filter-modal") && isFilterModalOpened) {
        toggleFilter();
      }
    });
  };

  const initApps = async () => {
    if (checkProvider()) {
      const newAppButton = document.getElementById("new-app");

      newAppButton?.addEventListener("click", () => {
        window.location.hash = "create-app";
      });

      subscribeProviderApps();
    }
  };
  HashRouter.initPageListeners("apps", initApps, "Apps");
</script>
